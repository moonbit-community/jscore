package "illusory0x0/jscore/jscore"

import(
  "moonbitlang/core/builtin"
)

// Values
let console : Console

let js_false : Any

let js_null : Any

fn js_throw(Error_) -> Unit

let js_true : Any

fn js_try_catch_finally(() -> Unit, (Error_) -> Unit, () -> Unit) -> Unit

let js_undefined : Any

let utf16Decoder : TextDecoder

// Types and methods
pub extern type AggregateError
impl AggregateError {
  new(Array[Error_], String_) -> Self
}
impl Js for AggregateError
impl Js_Error for AggregateError
impl Js_Object for AggregateError

pub extern type Any
impl Any {
  from_json(Json) -> Self
}
impl Js for Any
impl Js_Array for Any

pub extern type Array[T]
impl Array {
  empty[T]() -> Self[T]
  from_builtin[T : Js](@builtin.Array[T]) -> Self[T]
  from_iterator[T](Iterator[T]) -> Self[T]
  get[T : Js_Array](Self[T], Int) -> T
  length[T](Self[T]) -> Int
  new[T]() -> Self[T]
  op_get[T : Js](Self[T], Int) -> T
  op_set[T : Js](Self[T], Int, T) -> Unit
  set[T : Js_Array](Self[T], Int, T) -> Unit
}
impl[T] Js for Array[T]
impl[T] Js_Object for Array[T]

pub extern type ArrayBuffer
impl ArrayBuffer {
  byteLength(Self) -> Int
  detached(Self) -> Bool
  isView(Any) -> Bool
  maxByteLength(Self) -> Int
  new(Int) -> Self
  resizable(Self) -> Bool
  resize(Self, Int) -> Unit
  slice(Self, Int, Int) -> Self
  transfer(Self, Int) -> Self
  transferToFixedLength(Self, Int) -> Self
}
impl Js for ArrayBuffer
impl Js_Object for ArrayBuffer

pub extern type Console
impl Console {
  assert_[T : Js](Self, Bool, T) -> Unit
  clear(Self) -> Unit
  count(Self, String_) -> Unit
  countReset(Self, String_) -> Unit
  debug[T : Js](Self, T) -> Unit
  dir[T : Js](Self, T) -> Unit
  dirxml[T : Js](Self, T) -> Unit
  error[T : Js](Self, T) -> Unit
  group(Self, String_) -> Unit
  groupCollapsed(Self, String_) -> Unit
  groupEnd(Self, String_) -> Unit
  info[T : Js](Self, T) -> Unit
  log[T : Js](Self, T) -> Unit
  table[T](Self, Array[T]) -> Unit
  time(Self, String_) -> Unit
  timeEnd(Self, String_) -> Unit
  timeLog(Self, String_) -> Unit
  trace(Self) -> Unit
  warn[T : Js](Self, T) -> Unit
}
impl Js for Console
impl Js_Object for Console

pub extern type DataView
impl DataView {
  buffer(Self) -> ArrayBuffer
  byteLength(Self) -> Int
  byteOffset(Self) -> Int
  getBigInt64(Self, Int, Bool) -> Int64
  getBigUint64(Self, Int, Bool) -> UInt64
  getFloat32(Self, Int, Bool) -> Float
  getFloat64(Self, Int, Bool) -> Double
  getInt16(Self, Int, Bool) -> Int16
  getInt32(Self, Int, Bool) -> Int
  getInt8(Self, Int) -> Byte
  getUint16(Self, Int, Bool) -> UInt16
  getUint32(Self, Int, Bool) -> UInt
  getUint8(Self, Int) -> Byte
  new(ArrayBuffer, Int, Int) -> Self
  setBigInt64(Self, Int, Int64, Bool) -> Unit
  setBigUint64(Self, Int, UInt64, Bool) -> Unit
  setFloat32(Self, Int, Float, Bool) -> Unit
  setFloat64(Self, Int, Double, Bool) -> Unit
  setInt16(Self, Int, Int16, Bool) -> Unit
  setInt32(Self, Int, Int, Bool) -> Unit
  setInt8(Self, Int, Byte) -> Unit
  setUint16(Self, Int, UInt16, Bool) -> Unit
  setUint32(Self, Int, UInt, Bool) -> Unit
  setUint8(Self, Int, Byte) -> Unit
}
impl Js for DataView
impl Js_Object for DataView

pub extern type Date
impl Date {
  from_timestamp(Double) -> Self
  new(Int, Int, Int, Int, Int, Int, Int) -> Self
  now() -> Double
  parse(String_) -> Double
  toDateString(Self) -> String_
  toISOString(Self) -> String_
  toJSON(Self) -> Object
  toLocaleDateString(Self) -> String_
  toLocaleString(Self) -> String_
  toLocaleTimeString(Self) -> String_
  toString(Self) -> String_
  toTimeString(Self) -> String_
  toUTCString(Self) -> String_
  utc(Int, Int, Int, Int, Int, Int, Int) -> Self
}
impl Js for Date
impl Js_Object for Date

pub extern type Error_
impl Error_ {
  message(Self) -> String_
  name(Self) -> String_
  new(String_) -> Self
  toString(Self) -> String_
}
impl Js for Error_
impl Js_Error for Error_
impl Js_Object for Error_

pub extern type EvalError
impl EvalError {
  new(String_) -> Self
}
impl Js for EvalError
impl Js_Error for EvalError
impl Js_Object for EvalError

pub extern type Iterator[T]
impl[T] Js for Iterator[T]
impl[T] Js_Object for Iterator[T]

pub extern type Map[K, V]
impl Map {
  clear[K, V](Self[K, V]) -> Unit
  delete[K : Js, V : Js](Self[K, V], K) -> Bool
  entries[K, V](Self[K, V]) -> Iterator[Array[Any]]
  has[K : Js, V : Js](Self[K, V], K) -> Bool
  keys[K, V](Self[K, V]) -> Iterator[K]
  new[K, V]() -> Self[K, V]
  op_get[K : Js, V : Js](Self[K, V], K) -> V?
  op_set[K : Js, V : Js](Self[K, V], K, V) -> Unit
  size[K, V](Self[K, V]) -> Int
  values[K, V](Self[K, V]) -> Iterator[K]
}
impl[K, V] Js for Map[K, V]
impl[K, V] Js_Object for Map[K, V]

pub extern type Number
impl Number {
  new(Any) -> Self
}
impl Js for Number

pub extern type Object
impl Object {
  empty() -> Self
  op_get(Self, String_) -> Any
  op_set(Self, String_, Any) -> Unit
}
impl Js for Object
impl Js_Object for Object

pub extern type RangeError
impl RangeError {
  new(String_) -> Self
}
impl Js for RangeError
impl Js_Error for RangeError
impl Js_Object for RangeError

pub extern type ReferenceError
impl ReferenceError {
  new(String_) -> Self
}
impl Js for ReferenceError
impl Js_Error for ReferenceError
impl Js_Object for ReferenceError

pub extern type RegExp
impl RegExp {
  new(String_) -> Self
  toString(Self) -> String_
}
impl Js for RegExp
impl Js_Object for RegExp

pub extern type Set[V]
impl Set {
  add[T : Js](Self[T], T) -> Unit
  clear[T](Self[T]) -> Unit
  delete[T : Js](Self[T], T) -> Unit
  difference[T](Self[T], Self[T]) -> Self[T]
  entries[T](Self[T]) -> Iterator[Array[Any]]
  has[T : Js](Self[T], T) -> Bool
  intersection[T](Self[T], Self[T]) -> Self[T]
  isDisjointFrom[T](Self[T], Self[T]) -> Bool
  isSubsetOf[T](Self[T], Self[T]) -> Bool
  isSupersetOf[T](Self[T], Self[T]) -> Bool
  keys[T](Self[T]) -> Iterator[T]
  new[V]() -> Self[V]
  size[T](Self[T]) -> Int
  symmetricDifference[T](Self[T], Self[T]) -> Self[T]
  union[T](Self[T], Self[T]) -> Self[T]
  values[T](Self[T]) -> Iterator[T]
}
impl[T] Js for Set[T]
impl[T] Js_Object for Set[T]

pub extern type SharedArrayBuffer
impl SharedArrayBuffer {
  byteLength(Self) -> Int
  grow(Self, Int) -> Unit
  growable(Self) -> Bool
  maxByteLength(Self) -> Int
  new(Int) -> Self
  slice(Self, Int, Int) -> Self
}
impl Js for SharedArrayBuffer
impl Js_Object for SharedArrayBuffer

pub extern type String_
impl String_ {
  charCodeAt(Self, Int) -> Char
  length(Self) -> Int
  op_get(Self, Int) -> Char
  to_string(Self) -> String
}
impl Js for String_
impl Js_Object for String_

pub extern type SyntaxError
impl SyntaxError {
  new(String_) -> Self
}
impl Js for SyntaxError
impl Js_Error for SyntaxError
impl Js_Object for SyntaxError

pub extern type TextDecoder
impl TextDecoder {
  decode[T](Self, TypedArray[T]) -> String_
  encoding(Self) -> String_
  fatal(Self) -> Bool
  from_string(String) -> String_
  ignoreBOM(Self) -> Bool
  new(String_) -> Self
}

pub extern type TextEncoder
impl TextEncoder {
  encode(Self, String_) -> TypedArray[Byte]
  encodeInto(Self, String_, TypedArray[Byte]) -> Object
  encoding(Self) -> String_
  new() -> Self
}
impl Js for TextEncoder
impl Js_Object for TextEncoder

pub extern type TypeError
impl TypeError {
  new(String_) -> Self
}
impl Js for TypeError
impl Js_Error for TypeError
impl Js_Object for TypeError

pub extern type TypedArray[T]
impl TypedArray {
  length[T](Self[T]) -> Int
  make[T : Js_TypedArray](ArrayBuffer, Int, Int) -> Self[T]
  new[T : Js_TypedArray](ArrayBuffer, Int, Int) -> Self[T]
  op_get[T : Js_TypedArray](Self[T], Int) -> T
  op_set[T : Js_TypedArray](Self[T], Int, T) -> Unit
}
impl[T] Js for TypedArray[T]
impl[T] Js_Object for TypedArray[T]

pub extern type URIError

pub extern type WeakMap[K, V]
impl WeakMap {
  delete[K : Js_Object, V : Js_Object](Self[K, V], K) -> Bool
  has[K : Js_Object, V : Js_Object](Self[K, V], K) -> Bool
  new[K, V]() -> Self[K, V]
  op_get[K : Js_Object, V : Js_Object](Self[K, V], K) -> V?
  op_set[K : Js_Object, V : Js_Object](Self[K, V], K, V) -> Unit
}
impl[K, V] Js for WeakMap[K, V]
impl[K, V] Js_Object for WeakMap[K, V]

pub extern type WeakRef[T]
impl WeakRef {
  deref[T : Js_Object](Self[T]) -> T?
  new[T : Js](T) -> Self[T]
}
impl[T] Js for WeakRef[T]
impl[T] Js_Object for WeakRef[T]

pub extern type WeakSet[V]
impl WeakSet {
  add[T : Js_Object](Self[T], T) -> Unit
  delete[T : Js_Object](Self[T], T) -> Unit
  has[T : Js_Object](Self[T], T) -> Bool
  new[V]() -> Self[V]
}
impl[T] Js for WeakSet[T]
impl[T] Js_Object for WeakSet[T]

// Type aliases
pub typealias BigInt64Array = TypedArray[Int64]

pub typealias BigUint64Array = TypedArray[UInt64]

pub typealias Float32Array = TypedArray[Float]

pub typealias Float64Array = TypedArray[Double]

pub typealias Int16Array = TypedArray[Int16]

pub typealias Int32Array = TypedArray[Int]

pub typealias Int8Array = TypedArray[Byte]

pub typealias Uint16Array = TypedArray[UInt16]

pub typealias Uint32Array = TypedArray[UInt]

pub typealias Uint8Array = TypedArray[Byte]

// Traits
pub(open) trait Js {
  to_any(Self) -> Any
  downcast(Any) -> Self
}
impl Js::downcast
impl Js for Bool
impl Js for Byte
impl Js for Int
impl Js for Int16
impl Js for Int64
impl Js for UInt
impl Js for UInt16
impl Js for UInt64
impl Js for Float
impl Js for Double
impl[T : Js] Js for T?

pub trait Js_Array {
  get(Array[Self], Int) -> Self
  set(Array[Self], Int, Self) -> Unit
}
impl Js_Array for Bool
impl Js_Array for Byte
impl Js_Array for Char
impl Js_Array for Int
impl Js_Array for Int16
impl Js_Array for Int64
impl Js_Array for UInt
impl Js_Array for UInt16
impl Js_Array for UInt64
impl Js_Array for Float
impl Js_Array for Double

pub trait Js_Error : Js {
  to_error(Self) -> Error_
  name(Self) -> String_
  message(Self) -> String_
  toString(Self) -> String_
}

pub trait Js_Object : Js {
  to_object(Self) -> Object
}

pub trait Js_TypedArray {
  get(TypedArray[Self], Int) -> Self
  set(TypedArray[Self], Int, Self) -> Unit
  new(ArrayBuffer, Int, Int) -> TypedArray[Self]
}
impl Js_TypedArray for Byte
impl Js_TypedArray for Char
impl Js_TypedArray for Int
impl Js_TypedArray for Int16
impl Js_TypedArray for Int64
impl Js_TypedArray for UInt
impl Js_TypedArray for UInt16
impl Js_TypedArray for UInt64
impl Js_TypedArray for Float
impl Js_TypedArray for Double

